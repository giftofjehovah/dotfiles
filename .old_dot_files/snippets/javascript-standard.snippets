priority 1

###########################################################################
#                       Javascript Standard Snippets                      #
###########################################################################

################
# Declarations #
################

snippet v "var statement"
var ${1:name}
endsnippet

snippet v= "var assignment"
var ${1:name} = ${2:value}
endsnippet

snippet l "let statement"
let ${1:name}
endsnippet

snippet l= "let assignment"
let ${1:name} = ${2:value}
endsnippet

snippet c "const statement"
const ${1:name}
endsnippet

snippet l= "const assignment"
const ${1:name} = ${2:value}
endsnippet

snippet lif= "let declaration and if statement"
let ${1}
if (${0}) {
	$1 = ${2}
}
endsnippet

snippet ly "let yielded assignment"
let ${1:name} = yield ${2:value}
endsnippet

snippet cy "const yielded assignment"
const ${1:name} = yield ${2:value}
endsnippet

################
# Flow Control #
################

snippet if "if statement"
if (${1:condition}) {
	${0}
}
endsnippet

snippet el "else statement"
else {
	${0}
}
endsnippet

snippet ife "if else statement"
if (${1:condition}) {
	${0}
} else {

}
endsnippet

snippet ei "else if statement"
else if (${1:condition}) {
	${0}
}
endsnippet

snippet fl "for loop"
for (let ${1:i} = 0, $1 < ${2:iterable}.length; $1++) {
	${0}
}
endsnippet

snippet fi "for in loop"
for (let ${1:key} in ${2:source}) {
	if ($2.hasOwnProperty($1)) {
		${0}
	}
}
endsnippet

snippet fo "for of loop"
for (let ${1:key} of ${2:source}) {
	${0}
}
endsnippet

snippet wl "while loop"
while (${1:condition}) {
	${0}
}
endsnippet

snippet tc "try/catch"
try {
	${0}
} catch (${1:err}) {

}
endsnippet

snippet tf "try/finally"
try {
	${0}
} finally {

}
endsnippet

snippet tcf "try/catch/finally"
try {
	${0}
} catch (${1:err}) {

} finally {

}
endsnippet

#############
# Functions #
#############

snippet f "anonymous function"
function (${1:arguments}) { ${0} }
endsnippet

snippet fn "named function"
function ${1:name} (${2:arguments}) {
	${0}
}
endsnippet

snippet asf "async function"
async function (${1:arguments}) {
	${0}
}
endsnippet

snippet iife "IIFE"
;(function (${1:arguments}) {
	${0}
})(${2})
endsnippet

snippet fa "function apply"
${1:fn}.apply(${2:this}, ${3:arguments})
endsnippet

snippet fc "function call"
${1:fn}.call(${2:this}, ${3:arguments})
endsnippet

snippet fb "function bind"
${1:fn}.bind(${2:this}, ${3:arguments})
endsnippet

snippet af "arrow function"
(${1:arguments}) => ${2:statement}
endsnippet

snippet afb "arrow function with body"
(${1:arguments}) => {
	${0}
}
endsnippet

snippet gf "generator function"
function* (${1:arguments}) {
	${0}
}
endsnippet

snippet gfn "named generator function"
function* ${1:name}(${2:arguments}) {
	${0}
}
endsnippet

#############
# Iterables #
#############

snippet fe "forEach"
${1:iterable}.forEach((${2:item}) => {
	${0}
})
endsnippet

snippet map "map"
${1:iterable}.map((${2:item}) => {
	${0}
})
endsnippet

snippet reduce "reduce"
${1:iterable}.reduce((${2:previous}, ${3:current}) => {
	${0}
}${4:, initial})
endsnippet

snippet filter "filter"
${1:iterable}.filter((${2:item}) => {
	${0}
})
endsnippet

snippet find "find"
{${1:iterable}.find((${2:item}) => {
	${0}
})}
endsnippet

snippet every "every"
${1:iterable}.every((${2:item}) => {
	${0}
})
endsnippet

snippet some "some"
${1:iterable}.some((${2:item}) => {
	${0}
})
endsnippet

#####################
# Objects & Classes #
#####################

snippet cs "class"
class ${1:name} {
	constructor(${2:arguments}) {
		${0}
	}
}
endsnippet

snippet csx "child class"
class ${1:name} extends ${2:base} {
	constructor(${3:arguments}) {
		super($3)
		${0}
	}
}
endsnippet

snippet : "key/value pair"
${1:key}: ${2:'value'}
endsnippet

snippet m "method"
${1:method}(${2:arguments}) {
	${0}
}
endsnippet

snippet get "getter"
get ${1:property}() {
	${0}
}
endsnippet

snippet set "setter"
set ${1:property}(${2:value}) {
	${0}
}
endsnippet

snippet gs "getter & setter"
get ${1:property}() {
	${0}
}

set ${1:property}(${2:value}) {

}
endsnippet

snippet proto "prototype method"
${1:Class}.prototype.${2:methodName} = function (${3:arguments}) {
	${0}
}
endsnippet

snippet ok "Object.keys"
Object.keys(${1:obj})
endsnippet

snippet oa "Object.assign"
Object.assign(${1:dest}, ${2:source})
endsnippet

####################
# Returning Values #
####################

snippet r "return"
return ${0}
endsnippet

snippet rth "return this"
return this
endsnippet

snippet rn "return null"
return null
endsnippet

snippet rt "return true"
return true
endsnippet

snippet rf "return false"
return false
endsnippet

snippet r0 "return 0"
return 0
endsnippet

snippet r-1 "return -1"
return -1
endsnippet

snippet rp "return promise"
return new Promise((resolve, reject) => {
	${0}
})
endsnippet

#########
# Types #
#########

snippet S "String"
String
endsnippet

snippet N "Number"
Number
endsnippet

snippet O "Object"
Object
endsnippet

snippet A "Array"
Array
endsnippet

snippet D "Date"
Date
endsnippet

snippet Rx "RegExp"
RegExp
endsnippet

snippet tof "typeof comparison"
typeof ${1:source} === '${2:undefined}'
endsnippet

snippet iof "instanceof comparison"
${1:source} instanceof ${2:Object}
endsnippet

snippet ia "isArray"
Array.isArray(${1:source})
endsnippet

############
# Promises #
############

snippet p "new Promise"
new Promise((resolve, reject) => {
	${0}
})
endsnippet

snippet then "Promise.then"
${1:promise}.then((${2:value}) => {
	${0}
})
endsnippet

snippet catch "Promise.catch"
${1:promise}.catch((${2:err}) => {
	${0}
})
endsnippet

###############
# ES6 modules #
###############

snippet ex "module export"
export ${1:member}
endsnippet

snippet exd "module default export"
export default ${1:member}
endsnippet

snippet im "module import"
import ${1:*} from '${2:module}'
endsnippet

snippet ima "module import as"
import ${1:*} as ${2:name} from '${3:module}'
endsnippet

snippet imd "module import destructuring"
import {$1} from '${2:module}'
endsnippet

##########
# Timers #
##########

snippet st "setTimeout"
setTimeout(() => {
	${0}
}, ${1:delay})
endsnippet

snippet si "setInterval"
setTimeout(() => {
	${0}
}, ${1:delay})
endsnippet

snippet sim "setImmediate"
setImmediate(() => {
	${0}
})
endsnippet

#######
# DOM #
#######

snippet ae "addEventListener"
${1:document}.addEventListener('${2:event}', ${3:ev} => {
	${0}
})
endsnippet

snippet rel "removeEventListener"
${1:document}.removeEventListener('${2:event}', ${3:listener})
endsnippet

snippet gi " getElementById"
${1:document}.getElementById('${2:id}')
endsnippet

snippet gc "getElementsByClassName"
Array.from(${1:document}.getElementsByClassName('${2:class}'))
endsnippet

snippet at "getElementsByTagName"
Array.from(${1:document}.getElementsByTagName('${2:tag}'))
endsnippet

snippet qs "querySelector"
${1:document}.querySelector('${2:selector}')
endsnippet

snippet qsa "querySelectorAll"
Array.from(${1:document}.querySelectorAll('${2:selector}'))
endsnippet

snippet cdf "createDocumentFragment"
${1:document}.createDocumentFragment(${2:elem});
endsnippet

snippet cel "createElement"
${1:document}.createElement(${2:elem});
endsnippet

snippet ac "appendChild"
${1:document}.appendChild(${2:elem});
endsnippet

snippet rc "removeChild"
${1:document}.removeChild(${2:elem});
endsnippet

snippet cla "classList.add"
${1:document}.classList.add('${2:class}');
endsnippet

snippet clt "classList.toggle"
${1:document}.classList.toggle('${2:class}');
endsnippet

snippet clr " classList.remove"
${1:document}.classList.remove('${2:class}');
endsnippet

snippet ga "getAttribute"
${1:document}.getAttribute('${2:attr}');
endsnippet

snippet sa "setAttribute"
${1:document}.setAttribute('${2:attr}', ${3:value});
endsnippet

snippet ra "removeAttribute"
${1:document}.removeAttribute('${2:attr}');
endsnippet

###########
# Node.js #
###########

snippet cb "Node.js style callback"
function (err, ${1:value}) {
	if (err) throw err
	${0}
}
endsnippet

snippet re "require a module"
require('${1:module}')
endsnippet

snippet cre "require and assign a module"
const ${1:module} = require('$1')
endsnippet

snippet em "export member"
exports.${1:name} = ${2:value}
endsnippet

snippet me "module.exports"
${1:document}.removeAttribute('${2:attr}');
endsnippet

snippet on "attach an event handler"
${1:emitter}.on('${2:event}', (${3:arguments}) => {
	${0}
})
endsnippet

#################
# Miscellaneous #
#################

snippet us "use strict"
'use strict'
endsnippet

snippet js "JSON Stringify"
JSON.stringify($0)
endsnippet

snippet jp "JSON Parse"
JSON.parse($0)
endsnippet

snippet a "await"
await ${0}
endsnippet

###########
# Console #
###########

snippet cl "console.log"
console.log(${0})
endsnippet

snippet ce "console.error"
console.error(${0})
endsnippet

snippet cw "console.warn"
console.warn(${0})
endsnippet

snippet ct "console.table"
console.table(${0})
endsnippet
